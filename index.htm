<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>My ePub Reader and Library</title>
  <meta name="viewport" content="width=device-width, maximum-scale=1.0, user-scalable=no" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.5/jszip.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/epubjs/dist/epub.min.js"></script>
  <style>
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      font-family: sans-serif;
      background: #f5f5f5;
    }
    body.light-mode { background: #f5f5f5; }
    body.light-mode #toolbar { background: #eee; }
    body.sepia-mode { background: #f4ecd8; }
    body.sepia-mode #toolbar { background: #e7dbc3; }
    body.matcha-mode { background: #C3D8B6; }
    body.matcha-mode #toolbar { background: #B0CFA3; }
    body.night-mode { background: #111 !important; }
    body.night-mode #toolbar { background: #222 !important; }
    body.night-mode #continue-bar { background: #111 !important; color: #eee !important; }

    #toolbar {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      height: 42px;
      z-index: 1002;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0 6px;
      font-size: 14px;
    }
    #toolbar-left, #toolbar-right {
      display: flex;
      align-items: center;
      gap: 6px;
    }
    #toolbar button {
      background: transparent;
      border: none;
      font-size: 20px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      opacity: 0.8;
      width: 32px;
      height: 32px;
    }
    #toolbar button:hover { opacity: 1; }

    #pages-read {
      font-size: 13px;
      white-space: nowrap;
    }

    #search-bar {
      display: flex;
      align-items: center;
      background: white;
      border: 1px solid #ccc;
      border-radius: 4px;
      padding: 2px 4px;
      margin-left: 4px;
    }

    #search-bar input {
      border: none;
      font-size: 13px;
      outline: none;
      width: 100px;
      background: transparent;
    }

    #search-results {
      position: absolute;
      top: 42px;
      left: 10px;
      right: 10px;
      background: white;
      border: 1px solid #ccc;
      max-height: 200px;
      overflow-y: auto;
      font-size: 13px;
      z-index: 1002;
      display: none;
    }

    #search-results div {
      padding: 4px 8px;
      cursor: pointer;
    }

    #search-results div:hover {
      background: #eee;
    }

    #ffbar {
      display: flex;
      align-items: center;
      gap: 4px;
      margin-left: 6px;
    }

    #ffbar input[type="range"] {
      width: 90px;
    }
  </style>
</head>
<body class="light-mode">
  <div id="library-container">
    <h1>ðŸ“š My Book Library</h1>
    <div id="library-controls">
      <button onclick="toggleLibrary(false)">Back to Reader</button>
    </div>
    <div id="library">Loading books...</div>
  </div>

  <div id="reader-container">
    <div id="toolbar">
      <div id="toolbar-left">
        <button id="menu-toggle" title="Main Menu">â˜°</button>
        <button id="toc-toggle" title="Table of Contents">ðŸ“–</button>
        <button id="bookmark-toggle" title="Toggle Bookmark">â˜†</button>
        <button id="bookmark-dropdown" title="Bookmarks">ðŸ”–</button>
        <button id="settings-toggle" title="Read Settings">Aa</button>
      </div>
      <div id="toolbar-right">
        <div id="search-bar">
          <input type="text" id="searchInput" placeholder="Searchâ€¦" />
        </div>
        <div id="pages-read">Pg 1 of 289</div>
        <div id="ffbar">
          <input type="range" id="pageSlider" min="1" max="289" value="1" />
        </div>
      </div>
    </div>

    <div id="search-results"></div>

    <div id="bookmark-panel"></div>
    <div id="menu-backdrop"></div>
    <div id="expanded-menu">
      <button class="close-menu" onclick="toggleMenu('menu')">Ã—</button>
      <div id="book-card">
        <img id="cover" alt="Book Cover" />
        <div id="book-title"></div>
        <div id="book-author"></div>
        <div id="contact-image"></div>
      </div>
      <button class="menu-button" onclick="toggleLibrary(true)">Library</button>
    </div>

    <div id="toc-panel"></div>
    <div id="settings-modal">
      <button class="close-settings" onclick="toggleMenu('settings')">Ã—</button>
      <h3>Reading Settings</h3>
      <label for="font-switcher">Font</label>
      <select id="font-switcher">
        <option value="-apple-system">San Francisco (System)</option>
        <option value="Helvetica Neue">Helvetica Neue</option>
        <option value="Arial">Arial</option>
        <option value="Courier New">Courier New</option>
        <option value="Georgia">Georgia</option>
        <option value="OpenDyslexic">OpenDyslexic</option>
      </select>
      <div class="font-size-buttons">
        <button onclick="changeFontSize(-1)">A-</button>
        <button onclick="changeFontSize(1)">A+</button>
      </div>
      <label for="reading-mode">Reading Mode</label>
      <select id="reading-mode">
        <option value="paginated">Page</option>
        <option value="scrolled-doc">Scroll</option>
        <option value="swipe">Swipe</option>
      </select>
      <label for="theme-select">Color Theme</label>
      <select id="theme-select">
        <option value="light">Light</option>
        <option value="sepia">Sepia</option>
        <option value="night">Night</option>
        <option value="matcha">Matcha Green</option>
      </select>
    </div>

    <div id="viewer">
      <div id="tap-left"></div>
      <div id="tap-right"></div>
      <div id="gesture-left"></div>
      <div id="gesture-right"></div>
    </div>

    <div id="progress-bar"></div>
    <div id="continue-bar">Continue</div>
  </div>
<script>
  let lastNonNightTheme = "light";
  let currentBookUrl = "";
  let bookmarks = [];
  let book, rendition;
  let currentFontSize = parseInt(localStorage.getItem("reader-font-size")) || 100;
  let currentFlow = localStorage.getItem("reading-mode") || "swipe";
  let totalLocations = 0;
  let currentPageNum = 1;

  const pagesReadEl = document.getElementById("pages-read");
  const sliderEl = document.getElementById("pageSlider");
  const searchInput = document.getElementById("searchInput");
  const searchResults = document.getElementById("search-results");

  searchInput.addEventListener("input", function () {
    const query = this.value.toLowerCase().trim();
    if (!query || !book) return (searchResults.style.display = "none");

    book.locations.load(book.locations._locations).then(() => {
      const matches = book.locations._locations
        .map((loc, idx) => ({ loc, idx }))
        .filter(({ loc }) => loc.includes(query))
        .slice(0, 10); // Limit results

      searchResults.innerHTML = "";
      matches.forEach(({ loc, idx }) => {
        const div = document.createElement("div");
        div.textContent = "Match at location " + (idx + 1);
        div.onclick = () => {
          rendition.display(loc);
          searchResults.style.display = "none";
        };
        searchResults.appendChild(div);
      });
      searchResults.style.display = matches.length ? "block" : "none";
    });
  });

  sliderEl.addEventListener("input", function () {
    const percent = parseInt(this.value) / parseInt(this.max);
    const targetCfi = book.locations.cfiFromPercentage(percent);
    rendition.display(targetCfi);
  });

  function updatePageDisplay(location) {
    if (!book || !book.locations) return;
    const current = book.locations.percentageFromCfi(location.start.cfi);
    const total = book.locations.total;
    const page = Math.floor(current * total) + 1;
    currentPageNum = page;
    sliderEl.value = page;
    pagesReadEl.textContent = `Pg ${page} of ${total}`;
  }
  function initBook(chosenUrl) {
    if (!chosenUrl) return;
    currentBookUrl = chosenUrl;
    bookmarks = [];

    if (rendition) {
      rendition.destroy();
      rendition = null;
    }
    if (book) {
      book.destroy();
      book = null;
    }

    book = ePub(chosenUrl);
    rendition = book.renderTo("viewer", {
      width: "100%",
      height: "100%",
      flow: currentFlow === "scrolled-doc" ? "scrolled" : "paginated",
      snap: currentFlow !== "scrolled-doc",
      spread: "always",
      direction: "ltr"
    });

    rendition.display(localStorage.getItem("last-location-" + chosenUrl) || undefined);

    rendition.on("relocated", location => {
      localStorage.setItem("last-location-" + chosenUrl, location.start.cfi);
      updateBookmarkStar();
      updatePageDisplay(location);
    });

    book.ready.then(() => {
      book.locations.generate(1600).then(() => {
        totalLocations = book.locations.total;
        sliderEl.max = totalLocations;
      });
    });

    applyFontSwitch();
    loadBookmarks();

    book.loaded.metadata.then(meta => {
      document.getElementById("book-title").textContent = meta.title || "Untitled";
      document.getElementById("book-author").textContent = meta.creator || "";
    });
  }

  if (currentBookUrl) {
    initBook(currentBookUrl);
  }
</script>
</body>
</html>
